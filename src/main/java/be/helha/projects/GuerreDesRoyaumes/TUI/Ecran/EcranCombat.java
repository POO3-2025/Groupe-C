package be.helha.projects.GuerreDesRoyaumes.TUI.Ecran;

import be.helha.projects.GuerreDesRoyaumes.DAO.JoueurDAO;
import be.helha.projects.GuerreDesRoyaumes.DAOImpl.ActionCombatDAOImpl;
import be.helha.projects.GuerreDesRoyaumes.DAOImpl.CombatDAOImpl;
import be.helha.projects.GuerreDesRoyaumes.DAOImpl.PersonnageMongoDAOImpl;
import be.helha.projects.GuerreDesRoyaumes.DAOImpl.RoyaumeMongoDAOImpl;
import be.helha.projects.GuerreDesRoyaumes.Model.Competence_Combat.Competence;
import be.helha.projects.GuerreDesRoyaumes.Model.Joueur;
import be.helha.projects.GuerreDesRoyaumes.Model.Personnage.Personnage;
import be.helha.projects.GuerreDesRoyaumes.Service.ServiceCombat;
import be.helha.projects.GuerreDesRoyaumes.ServiceImpl.CompetenceServiceImpl;
import com.googlecode.lanterna.TerminalSize;
import com.googlecode.lanterna.gui2.*;
import com.googlecode.lanterna.gui2.dialogs.MessageDialogBuilder;
import com.googlecode.lanterna.gui2.dialogs.MessageDialogButton;
import com.googlecode.lanterna.screen.Screen;
import com.googlecode.lanterna.terminal.Terminal;
import com.googlecode.lanterna.SGR;
import com.googlecode.lanterna.TextColor;


import java.sql.ResultSet;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

public class EcranCombat {
    private final JoueurDAO joueurDAO;
    private final WindowBasedTextGUI textGUI;
    private final Screen screen;
    private final Joueur joueur;
    private final Joueur adversaire;
    private final ServiceCombat serviceCombat;
    private int tourActuel = 1;
    private final int MAX_TOURS = 5;
    private boolean actionAdversaireRecue = false;
    private String actionAdversaire = null;
    private int compteurVerifications = 0;
    
    // Pour suivre les comp√©tences d√©j√† utilis√©es
    private List<Competence> competencesUtilisees = Collections.emptyList();
    // Pour suivre l'√©tat de la fen√™tre
    private boolean fenetreAttenteActive = false;

    public EcranCombat(JoueurDAO joueurDAO, WindowBasedTextGUI textGUI, Screen screen,
                       Joueur joueur, Joueur adversaire, ServiceCombat serviceCombat) {
        this.joueurDAO = joueurDAO;
        this.textGUI = textGUI;
        this.screen = screen;
        this.joueur = joueur;
        this.adversaire = adversaire;
        this.serviceCombat = serviceCombat;
        
        // √Ä l'initialisation, charger les comp√©tences du joueur
        try {
            CompetenceServiceImpl competenceService = CompetenceServiceImpl.getInstance();
            competencesUtilisees = competenceService.obtenirCompetencesJoueur(joueur);
        } catch (Exception e) {
            System.err.println("Erreur lors du chargement des comp√©tences utilis√©es: " + e.getMessage());
        }
    }

    public void afficher() {
        // R√©cup√©rer l'ID du combat en cours
        String idCombat = null;
        try {
            idCombat = serviceCombat.obtenirIdCombatEnCours(joueur.getId());
            if (idCombat == null) {
                afficherMessageErreur("Impossible de trouver l'ID du combat en cours.");
                return;
            }
        } catch (Exception e) {
            afficherMessageErreur("Erreur lors de la r√©cup√©ration de l'ID du combat: " + e.getMessage());
            return;
        }

        // Actualiser les points de vie avant d'afficher l'√©cran
        rafraichirPointsDeVie();

        // V√©rifier si le combat est termin√©
        if (estCombatTermine()) {
            terminerCombat();
            return;
        }

        // V√©rifier si le maximum de tours est atteint
        if (tourActuel > MAX_TOURS) {
            terminerCombat();
            return;
        }
        
        // V√©rifier l'√©tat des deux joueurs pour ce tour
        boolean joueurLocalPret = false;
        boolean adversairePret = false;
        try {
            ActionCombatDAOImpl actionCombatDAO = ActionCombatDAOImpl.getInstance();
            joueurLocalPret = actionCombatDAO.joueurAEffectueAction(idCombat, tourActuel, joueur.getId());
            adversairePret = actionCombatDAO.joueurAEffectueAction(idCombat, tourActuel, adversaire.getId());
            
            System.out.println("== √âTAT DU COMBAT (Tour " + tourActuel + ") ==");
            System.out.println("- " + joueur.getPseudo() + " a jou√©: " + joueurLocalPret);
            System.out.println("- " + adversaire.getPseudo() + " a jou√©: " + adversairePret);
            
            // Si les deux joueurs ont d√©j√† jou√© pour ce tour, afficher l'√©cran de r√©solution
            if (joueurLocalPret && adversairePret) {
                afficherEcranResolutionTour();
                return;
            }
            
            // Si ce joueur a d√©j√† jou√© mais pas l'adversaire, afficher l'√©cran d'attente
            if (joueurLocalPret && !adversairePret) {
                afficherEcranAttente();
                return;
            }
            
            // Si l'adversaire a jou√© mais pas ce joueur, on continue normalement pour permettre de jouer
            if (!joueurLocalPret && adversairePret) {
                System.out.println("C'est √† votre tour de jouer !");
            }
            
        } catch (Exception e) {
            System.err.println("Erreur lors de la v√©rification de l'√©tat des joueurs: " + e.getMessage());
            // On continue quand m√™me pour √©viter de bloquer le jeu
        }

        // === √âCRAN PRINCIPAL DU COMBAT ===
        Window fenetre = new BasicWindow("Combat - Tour " + tourActuel + "/" + MAX_TOURS);
        fenetre.setHints(Collections.singletonList(Window.Hint.CENTERED));

        Panel panelPrincipal = new Panel(new GridLayout(1));
        
        // Barre de titre avec statut du tour
        Panel titrePanel = new Panel(new GridLayout(1));
        titrePanel.addComponent(new Label("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"));
        titrePanel.addComponent(new Label("‚ïë            GUERRE DES ROYAUMES          ‚ïë"));
        titrePanel.addComponent(new Label("‚ïë              TOUR " + tourActuel + " SUR " + MAX_TOURS + "              ‚ïë"));
        titrePanel.addComponent(new Label("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"));
        panelPrincipal.addComponent(titrePanel);
        panelPrincipal.addComponent(new EmptySpace());
        
        // Panneau de statut des joueurs
        Panel statutPanel = new Panel(new GridLayout(3));
        
        // En-t√™tes
        statutPanel.addComponent(new Label("STATUT"));
        statutPanel.addComponent(new Label(joueur.getPseudo()));
        statutPanel.addComponent(new Label(adversaire.getPseudo()));
        
        // Statut du tour
        statutPanel.addComponent(new Label("Action:"));
        
        if (joueurLocalPret) {
            statutPanel.addComponent(new Label("‚úì Jou√©e"));
        } else {
            statutPanel.addComponent(new Label("‚óã En attente"));
        }
        
        if (adversairePret) {
            statutPanel.addComponent(new Label("‚úì Jou√©e"));
        } else {
            statutPanel.addComponent(new Label("‚óã En attente"));
        }
        
        panelPrincipal.addComponent(statutPanel);
        panelPrincipal.addComponent(new EmptySpace());
        
        // Statistiques des personnages
        Panel statsPanel = creerPanneauStatistiquesComplet();
        
        panelPrincipal.addComponent(statsPanel);
        panelPrincipal.addComponent(new EmptySpace());
        
        // Bouton pour actualiser l'√©tat du combat
        // Cr√©er une r√©f√©rence finale pour utilisation dans le lambda
        final Window fenetreActualisation = fenetre;
        panelPrincipal.addComponent(new Button("‚Üª Actualiser l'√©tat du combat", () -> {
            rafraichirPointsDeVie();
            fenetreActualisation.close();
            afficher();
        }));
        panelPrincipal.addComponent(new EmptySpace());
        
        // Section des actions
        if (!joueurLocalPret) {
            // Si c'est au tour du joueur, afficher les options d'action
            Panel actionsPanel = new Panel(new GridLayout(2));
            actionsPanel.addComponent(new Label("‚ïê‚ïê‚ïê ACTIONS DISPONIBLES ‚ïê‚ïê‚ïê"));
            actionsPanel.addComponent(new EmptySpace());
            
            // Cr√©er une r√©f√©rence finale pour les actions
            final Window fenetreAction = fenetre;
            
            // Bouton d'attaque
            String finalIdCombat = idCombat;
            actionsPanel.addComponent(new Button("‚öîÔ∏è Attaquer", () -> {
                executerActionAttaque(finalIdCombat, fenetreAction);
            }));
            
            // Bouton de d√©fense
            String finalIdCombat1 = idCombat;
            actionsPanel.addComponent(new Button("üõ°Ô∏è Se d√©fendre", () -> {
                executerActionDefense(finalIdCombat1, fenetreAction);
            }));
            
            // Bouton pour utiliser une comp√©tence
            actionsPanel.addComponent(new Button("‚ú® Utiliser Comp√©tence", () -> {
                fenetreAction.close();
                afficherChoixCompetence();
            }));

            // Bouton pour utiliser une potion
            actionsPanel.addComponent(new Button("üß™ Utiliser Potion", () -> {
                fenetreAction.close();
                afficherChoixPotion();
            }));
            
            panelPrincipal.addComponent(actionsPanel);
        } else {
            // Si le joueur a d√©j√† jou√©, afficher un message
            Panel messagePanel = new Panel(new GridLayout(1));
            messagePanel.addComponent(new Label("‚ïê‚ïê‚ïê TOUR TERMIN√â ‚ïê‚ïê‚ïê"));
            messagePanel.addComponent(new Label("Vous avez d√©j√† effectu√© votre action pour ce tour."));
            messagePanel.addComponent(new Label("Attendez que votre adversaire termine son action."));
            
            panelPrincipal.addComponent(messagePanel);
            
            // Bouton pour passer en mode attente
            // Utiliser la r√©f√©rence finale pr√©alablement cr√©√©e
            panelPrincipal.addComponent(new Button("Passer en mode attente", () -> {
                fenetreActualisation.close();
                afficherEcranAttente();
            }));
        }
        
        panelPrincipal.addComponent(new EmptySpace());
        
        // Bouton pour abandonner le combat
        Panel boutonPanel = new Panel(new GridLayout(1));
        boutonPanel.addComponent(new Button("‚ùå Abandonner le combat", () -> {
            MessageDialogButton reponse = new MessageDialogBuilder()
                .setTitle("Abandonner")
                .setText("√ätes-vous s√ªr de vouloir abandonner ce combat ? Vous perdrez automatiquement.")
                .addButton(MessageDialogButton.Yes)
                .addButton(MessageDialogButton.No)
                .build()
                .showDialog(textGUI);

            if (reponse == MessageDialogButton.Yes) {
                fenetreActualisation.close(); // Utiliser la r√©f√©rence finale pr√©alablement cr√©√©e
                try {
                    serviceCombat.terminerCombat(joueur, adversaire, adversaire); // Adversaire gagne par abandon
                    afficherMessageSucces("Vous avez abandonn√© le combat. " + adversaire.getPseudo() + " remporte la victoire.");
                } catch (Exception e) {
                    System.err.println("Erreur lors de l'abandon du combat: " + e.getMessage());
                }
                retourMenuPrincipal();
            }
        }));
        panelPrincipal.addComponent(boutonPanel);

        fenetre.setComponent(panelPrincipal);
        textGUI.addWindowAndWait(fenetre);
    }
    
    private void executerActionAttaque(String idCombat, Window fenetrePrecedente) {
        try {
            // Calculer les d√©g√¢ts totaux (personnage + armes)
            double degatsPersonnage = joueur.getPersonnage().getDegats();
            double degatsArmes = calculerBonusAttaqueItems();
            double degatsTotal = degatsPersonnage + degatsArmes;
            
            double resistanceAdversaire = adversaire.getPersonnage().getResistance();
            
            double pvApresAttaque = 0;
            double pvActuelsAdversaire = 0;
            double degatsRestants = 0;
            double resistanceRestante = 0;
            
            if (degatsTotal > resistanceAdversaire) {
                degatsRestants = degatsTotal - resistanceAdversaire;
                
                pvActuelsAdversaire = adversaire.getPersonnage().getPointsDeVie();
                pvApresAttaque = Math.max(0, pvActuelsAdversaire - degatsRestants);
                adversaire.getPersonnage().setPointsDeVie(pvApresAttaque);
                
                // Apr√®s l'attaque, la r√©sistance tombe √† 0
                adversaire.getPersonnage().setResistance(0);
            } else {
                // Tous les d√©g√¢ts sont absorb√©s par la r√©sistance
                resistanceRestante = resistanceAdversaire - degatsTotal;
                adversaire.getPersonnage().setResistance(resistanceRestante);
                // Les PV ne changent pas
                pvApresAttaque = adversaire.getPersonnage().getPointsDeVie();
            }
            
            // R√©cup√©rer les points de vie actuels du joueur
            double pvJoueur = joueur.getPersonnage().getPointsDeVie();
            
            // Enregistrer l'action dans la table actions_combat
            ActionCombatDAOImpl actionCombatDAO = ActionCombatDAOImpl.getInstance();
            String parametres = "{\"degats\":" + degatsTotal + "}";
            boolean actionEnregistree = actionCombatDAO.enregistrerAction(
                idCombat, 
                tourActuel, 
                joueur.getId(), 
                "attaque", 
                parametres,
                pvJoueur,
                pvApresAttaque
            );
            
            if (!actionEnregistree) {
                afficherMessageErreur("Erreur lors de l'enregistrement de l'action d'attaque.");
                return;
            }
            
            // Enregistrer les PV actualis√©s
            serviceCombat.mettreAJourPointsDeVie(adversaire.getId(), pvApresAttaque);
            
            // Ins√©rer les deux joueurs dans la table action_etats_personnage avec les nouvelles vie restante et points_defense
            // R√©cup√©rer les points de d√©fense actuels
            double defenseJoueur = joueur.getPersonnage().getResistance();
            double defenseAdversaire = adversaire.getPersonnage().getResistance();
            
            // Enregistrer l'√©tat du joueur attaquant
            actionCombatDAO.enregistrerEtatPersonnage(
                idCombat,
                joueur.getId(),
                pvJoueur,
                defenseJoueur,
                null // Aucun buff pour l'instant
            );
            
            // Enregistrer l'√©tat de l'adversaire
            actionCombatDAO.enregistrerEtatPersonnage(
                idCombat,
                adversaire.getId(),
                pvApresAttaque,
                defenseAdversaire,
                null // Aucun buff pour l'instant
            );
            
            // Passer au joueur suivant
            serviceCombat.passerAuJoueurSuivant(idCombat, adversaire.getId());
            
            // Afficher le r√©sultat de l'attaque sans fermer la fen√™tre principale
            String message = "Attaque r√©ussie ! Vous avez inflig√© " + degatsTotal + 
                            " points de d√©g√¢ts √† " + adversaire.getPseudo() + 
                            ".\nPV adversaire: " + pvApresAttaque;
            
            // V√©rifier si le combat se termine par mort subite
            if (pvApresAttaque <= 0) {
                message += "\n\nVictoire ! Vous avez vaincu " + adversaire.getPseudo() + " !";
                // Terminer le combat avec le joueur actuel comme vainqueur
                serviceCombat.terminerCombat(joueur, adversaire, joueur);
                
                // Afficher le message et terminer le combat
                new MessageDialogBuilder()
                    .setTitle("Victoire !")
                    .setText(message)
                    .addButton(MessageDialogButton.OK)
                    .build()
                    .showDialog(textGUI);
                
                fenetrePrecedente.close();
                terminerCombat();
                return;
            }
            
            // Afficher le message et passer √† l'√©cran d'attente
            new MessageDialogBuilder()
                .setTitle("Attaque r√©ussie")
                .setText(message)
                .addButton(MessageDialogButton.OK)
                .build()
                .showDialog(textGUI);
            
            // Fermer la fen√™tre principale et passer √† la phase d'attente
            fenetrePrecedente.close();
            afficherEcranAttente();
            
        } catch (Exception e) {
            e.printStackTrace();
            afficherMessageErreur("Erreur lors de l'ex√©cution de l'attaque: " + e.getMessage());
        }
    }
    
    private void executerActionDefense(String idCombat, Window fenetrePrecedente) {
        try {
            // Calculer le bonus de d√©fense
            double bonusDefense = calculerBonusDefenseItems();
            double defenseTotal = joueur.getPersonnage().getResistance() + bonusDefense;
            
            // Mettre √† jour la r√©sistance du personnage
            joueur.getPersonnage().setResistance(defenseTotal);
            
            // R√©cup√©rer les points de vie actuels
            double pvJoueur = joueur.getPersonnage().getPointsDeVie();
            double pvAdversaire = adversaire.getPersonnage().getPointsDeVie();
            
            // Enregistrer l'action dans la table actions_combat
            ActionCombatDAOImpl actionCombatDAO = ActionCombatDAOImpl.getInstance();
            String parametres = "{\"bonusDefense\":" + bonusDefense + "}";
            boolean actionEnregistree = actionCombatDAO.enregistrerAction(
                idCombat, 
                tourActuel, 
                joueur.getId(), 
                "defense", 
                parametres,
                pvJoueur,
                pvAdversaire
            );
            
            if (!actionEnregistree) {
                afficherMessageErreur("Erreur lors de l'enregistrement de l'action de d√©fense.");
                return;
            }
            
            // Ins√©rer les deux joueurs dans la table action_etats_personnage
            // Enregistrer l'√©tat du joueur qui se d√©fend avec son bonus de d√©fense
            actionCombatDAO.enregistrerEtatPersonnage(
                idCombat,
                joueur.getId(),
                (int) pvJoueur,
                (int) defenseTotal, // On ajoute le bonus de d√©fense
                null // Aucun buff pour l'instant
            );
            
            // Enregistrer l'√©tat de l'adversaire
            actionCombatDAO.enregistrerEtatPersonnage(
                idCombat,
                adversaire.getId(),
                (int) pvAdversaire,
                (int) adversaire.getPersonnage().getResistance(),
                null // Aucun buff pour l'instant
            );
            
            // Passer au joueur suivant
            serviceCombat.passerAuJoueurSuivant(idCombat, adversaire.getId());
            
            // Afficher le message de confirmation
            String message = "Vous avez choisi la d√©fense. Bonus de " + 
                defenseTotal + " points de d√©fense." +
                "\n\nVous √™tes maintenant en position d√©fensive contre la prochaine attaque.";
                
            new MessageDialogBuilder()
                .setTitle("D√©fense activ√©e")
                .setText(message)
                .addButton(MessageDialogButton.OK)
                .build()
                .showDialog(textGUI);
            
            // Fermer la fen√™tre et passer √† l'√©cran d'attente
            fenetrePrecedente.close();
            afficherEcranAttente();
            
        } catch (Exception e) {
            e.printStackTrace();
            afficherMessageErreur("Erreur lors de l'ex√©cution de la d√©fense: " + e.getMessage());
        }
    }

    private void afficherFenetreAttenteEtPlanifierVerification() {
        Window fenetreAttente = new BasicWindow("Attente");
        fenetreAttente.setHints(Collections.singletonList(Window.Hint.CENTERED));

        Panel panel = new Panel(new LinearLayout(Direction.VERTICAL));
        panel.addComponent(new Label("En attente de l'adversaire..."));
        panel.addComponent(new Label("Tour " + tourActuel + "/" + MAX_TOURS));

        // Bouton de v√©rification manuelle
        panel.addComponent(new Button("Actualiser", () -> {
            fenetreAttente.close();
            textGUI.getGUIThread().invokeLater(this::afficher);
        }));

        fenetreAttente.setComponent(panel);
        textGUI.addWindowAndWait(fenetreAttente);

        // Planifier la v√©rification automatique apr√®s fermeture de la fen√™tre
        textGUI.getGUIThread().invokeLater(() -> {
            if (!serviceCombat.sontJoueursPrets(joueur, adversaire)) {
                afficherFenetreAttenteEtPlanifierVerification();
            } else {
                afficher(); // Relancer l'affichage principal si pr√™t
            }
        });
    }

    private void afficherChoixCompetence() {
        Window fenetre = new BasicWindow("Choix de Comp√©tence");
        fenetre.setHints(Collections.singletonList(Window.Hint.CENTERED));

        Panel panel = new Panel(new GridLayout(1));
        panel.addComponent(new Label("Choisissez une comp√©tence √† utiliser:"));
        panel.addComponent(new EmptySpace());

        try {
            // R√©cup√©rer les comp√©tences achet√©es par le joueur
            CompetenceServiceImpl competenceService = CompetenceServiceImpl.getInstance();
            List<Competence> competencesJoueur = competenceService.obtenirCompetencesJoueur(joueur);
            
            if (competencesJoueur.isEmpty()) {
                panel.addComponent(new Label("Vous n'avez pas encore achet√© de comp√©tences."));
            } else {
                Panel competencesPanel = new Panel(new GridLayout(3));
                competencesPanel.addComponent(new Label("Nom"));
                competencesPanel.addComponent(new Label("Description"));
                competencesPanel.addComponent(new Label("Action"));
                
                for (Competence competence : competencesJoueur) {
                    competencesPanel.addComponent(new Label(competence.getNom()));
                    competencesPanel.addComponent(new Label(competence.getDescription()));
                    
                    // V√©rifier si la comp√©tence a d√©j√† √©t√© utilis√©e
                    boolean dejaUtilisee = competencesUtilisees.stream()
                            .anyMatch(c -> c.getId().equals(competence.getId()));
                    
                    Button btnUtiliser = new Button("Utiliser", () -> {
                        // TODO: Impl√©menter l'utilisation de la comp√©tence
                        // serviceCombat.utiliserCompetence(joueur, adversaire, competence.getId(), tourActuel);
                        afficherMessageSucces("Vous avez choisi d'utiliser la comp√©tence: " + competence.getNom());
                        // competencesUtilisees.add(competence); // Ajouter √† la liste des comp√©tences utilis√©es
                        fenetre.close();
                        afficher();
                    });
                    
                    // D√©sactiver le bouton si la comp√©tence a d√©j√† √©t√© utilis√©e
                    if (dejaUtilisee) {
                        btnUtiliser.setEnabled(false);
                        competencesPanel.addComponent(new Label("D√©j√† utilis√©e"));
                    } else {
                        competencesPanel.addComponent(btnUtiliser);
                    }
                }
                
                panel.addComponent(competencesPanel);
            }
        } catch (Exception e) {
            panel.addComponent(new Label("Erreur lors du chargement des comp√©tences: " + e.getMessage()));
        }
        
        panel.addComponent(new EmptySpace());
        panel.addComponent(new Button("Retour", () -> {
            fenetre.close();
            afficher();
        }));

        fenetre.setComponent(panel);
        textGUI.addWindowAndWait(fenetre);
    }

    private void afficherChoixPotion() {
        Window fenetre = new BasicWindow("Utiliser une Potion");
        fenetre.setHints(Collections.singletonList(Window.Hint.CENTERED));

        Panel panel = new Panel(new GridLayout(1));
        panel.addComponent(new Label("Quel type de potion souhaitez-vous utiliser?"));
        panel.addComponent(new EmptySpace());

        // V√©rifier si le joueur a des potions dans son inventaire
        boolean aPotionSoin = joueurHasPotionType("Soin");
        boolean aPotionDegats = joueurHasPotionType("D√©g√¢ts");
        
        Panel optionsPanel = new Panel(new GridLayout(2));
        
        Button btnPotionSoin = new Button("Potion de Soin", () -> {
            // TODO: Impl√©menter l'utilisation de la potion de soin
            // serviceCombat.utiliserPotion(joueur, "soin", tourActuel);
            afficherMessageSucces("Vous avez utilis√© une potion de soin. +30 points de vie.");
            fenetre.close();
            afficher();
        });
        btnPotionSoin.setEnabled(aPotionSoin);
        optionsPanel.addComponent(btnPotionSoin);
        
        Button btnPotionDegats = new Button("Potion de D√©g√¢ts", () -> {
            // TODO: Impl√©menter l'utilisation de la potion de d√©g√¢ts
            // serviceCombat.utiliserPotion(joueur, "degats", tourActuel);
            afficherMessageSucces("Vous avez utilis√© une potion de d√©g√¢ts. +20 points de d√©g√¢ts √† l'adversaire.");
            fenetre.close();
            afficher();
        });
        btnPotionDegats.setEnabled(aPotionDegats);
        optionsPanel.addComponent(btnPotionDegats);
        
        panel.addComponent(optionsPanel);
        
        if (!aPotionSoin && !aPotionDegats) {
            panel.addComponent(new Label("Vous n'avez aucune potion dans votre inventaire."));
        }
        
        panel.addComponent(new EmptySpace());
        panel.addComponent(new Button("Retour", () -> {
            fenetre.close();
            afficher();
        }));

        fenetre.setComponent(panel);
        textGUI.addWindowAndWait(fenetre);
    }

    private boolean joueurHasPotionType(String type) {
        // TODO: Impl√©menter la v√©rification de potions dans l'inventaire
        // Cette fonction devrait v√©rifier si le joueur a une potion du type sp√©cifi√©
        // Pour l'instant, on retourne true pour d√©monstration
        return true;
    }

    private double calculerBonusAttaqueItems() {
        // Utiliser le service de combat pour calculer les d√©g√¢ts totaux du joueur
        double degatsTotal = serviceCombat.calculerDegatsJoueur(joueur);
        double degatsPersonnage = joueur.getPersonnage().getDegats();
        
        // Retourner uniquement le bonus des items (d√©g√¢ts totaux - d√©g√¢ts de base du personnage)
        return degatsTotal - degatsPersonnage;
    }

    private int calculerBonusDefenseItems() {
        // TODO: Impl√©menter le calcul du bonus de d√©fense des items
        // Cette fonction devrait parcourir l'inventaire du joueur et calculer les bonus de d√©fense
        // Pour l'instant, on retourne une valeur de test
        return 8;
    }

    private void afficherConfirmationAction(String typeAction) {
        Window fenetre = new BasicWindow("Confirmation");
        fenetre.setHints(Collections.singletonList(Window.Hint.CENTERED));

        // Cr√©er une r√©f√©rence finale pour la fen√™tre √† utiliser dans les lambdas
        final Window fenetreFinale = fenetre;

        Panel panel = new Panel(new GridLayout(1));
        panel.addComponent(new Label("Vous avez choisi: " + typeAction));
        panel.addComponent(new Label("Voulez-vous confirmer cette action?"));
        
        Panel boutonsPanel = new Panel(new GridLayout(2));
        boutonsPanel.addComponent(new Button("Confirmer", () -> {
            // TODO: Impl√©menter la confirmation de l'action
            fenetreFinale.close();
            // attendreProchainTour();
        }));
        
        boutonsPanel.addComponent(new Button("Annuler", () -> {
            fenetreFinale.close();
            afficher(); // Retour √† l'√©cran de s√©lection d'action
        }));
        
        panel.addComponent(boutonsPanel);
        
        fenetre.setComponent(panel);
        textGUI.addWindowAndWait(fenetre);
    }

    private void rafraichirPointsDeVie() {
        try {
            // R√©cup√©rer l'ID du combat en cours
            String idCombat = serviceCombat.obtenirIdCombatEnCours(joueur.getId());
            if (idCombat == null) {
                System.err.println("Impossible de trouver l'ID du combat en cours.");
                return;
            }
            
            // R√©cup√©rer les stats actuels depuis la table action_etats_personnage
            ActionCombatDAOImpl actionCombatDAO = ActionCombatDAOImpl.getInstance();
            
            // Option 1: R√©cup√©rer les stats individuellement pour chaque joueur
            int[] statsJoueur = actionCombatDAO.recupererDerniersStats(idCombat, joueur.getId());
            int[] statsAdversaire = actionCombatDAO.recupererDerniersStats(idCombat, adversaire.getId());
            
            if (statsJoueur != null && statsAdversaire != null) {
                // Mettre √† jour les points de vie locaux
                int pvJoueur = statsJoueur[0];
                int defenseJoueur = statsJoueur[1];
                int pvAdversaire = statsAdversaire[0];
                int defenseAdversaire = statsAdversaire[1];
                
                joueur.getPersonnage().setPointsDeVie(pvJoueur);
                adversaire.getPersonnage().setPointsDeVie(pvAdversaire);
                
                System.out.println("Stats actualis√©s via action_etats_personnage:");
                System.out.println("   - Joueur: PV=" + pvJoueur + ", D√©fense=" + defenseJoueur);
                System.out.println("   - Adversaire: PV=" + pvAdversaire + ", D√©fense=" + defenseAdversaire);
            } else {
                // Si aucun √©tat n'est trouv√© dans action_etats_personnage, on utilise la m√©thode alternative
                System.out.println("Aucun √©tat trouv√© dans action_etats_personnage, r√©cup√©ration directe des personnages...");
                
                // M√©thode alternative: r√©cup√©rer les personnages actualis√©s depuis MongoDB
                PersonnageMongoDAOImpl personnageDAO = PersonnageMongoDAOImpl.getInstance();
                
                Personnage personnageJoueur = personnageDAO.obtenirPersonnageParJoueurId(joueur.getId());
                Personnage personnageAdversaire = personnageDAO.obtenirPersonnageParJoueurId(adversaire.getId());
                
                if (personnageJoueur != null && personnageAdversaire != null) {
                    // Mettre √† jour les points de vie locaux
                    joueur.getPersonnage().setPointsDeVie(personnageJoueur.getPointsDeVie());
                    adversaire.getPersonnage().setPointsDeVie(personnageAdversaire.getPointsDeVie());
                    
                    System.out.println("Points de vie actualis√©s via MongoDB - Joueur: " + 
                                      joueur.getPersonnage().getPointsDeVie() + 
                                      ", Adversaire: " + adversaire.getPersonnage().getPointsDeVie());
                } else {
                    System.err.println("Impossible de r√©cup√©rer les personnages depuis la base de donn√©es.");
                }
            }
            
            // R√©cup√©rer la derni√®re action du combat pour informer le joueur
            String derniereAction = actionCombatDAO.obtenirDerniereAction(idCombat);
            if (derniereAction != null && !derniereAction.isEmpty()) {
                System.out.println("Derni√®re action du combat: " + derniereAction);
            }
            
        } catch (Exception e) {
            System.err.println("Erreur lors de l'actualisation des points de vie: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void attendreProchainTour() {
        // Simulation de l'attente pour le prochain tour
        Window fenetre = new BasicWindow("Tour " + tourActuel + " termin√©");
        fenetre.setHints(Collections.singletonList(Window.Hint.CENTERED));
        
        // D√©finir que la fen√™tre est active
        fenetreAttenteActive = true;

        Panel panel = new Panel(new GridLayout(1));
        panel.addComponent(new Label("Votre action pour le tour " + tourActuel + " est enregistr√©e."));
        panel.addComponent(new Label("En attente de l'action de l'adversaire..."));

        // Afficher les points de vie actuels
        panel.addComponent(new EmptySpace());
        Panel pvsPanel = new Panel(new GridLayout(2));
        Label pvJoueurLabel = new Label("PV " + joueur.getPseudo() + ": " + joueur.getPersonnage().getPointsDeVie());
        Label pvAdversaireLabel = new Label("PV " + adversaire.getPseudo() + ": " + adversaire.getPersonnage().getPointsDeVie());
        pvsPanel.addComponent(pvJoueurLabel);
        pvsPanel.addComponent(pvAdversaireLabel);
        panel.addComponent(pvsPanel);
        panel.addComponent(new EmptySpace());
        
        // Bouton pour actualiser manuellement les points de vie
        panel.addComponent(new Button("Actualiser l'√©tat du combat", () -> {
            rafraichirPointsDeVie();
            pvJoueurLabel.setText("PV " + joueur.getPseudo() + ": " + joueur.getPersonnage().getPointsDeVie());
            pvAdversaireLabel.setText("PV " + adversaire.getPseudo() + ": " + adversaire.getPersonnage().getPointsDeVie());
            
            // R√©cup√©rer √©galement les points de d√©fense pour l'affichage
            try {
                String idCombat = serviceCombat.obtenirIdCombatEnCours(joueur.getId());
                if (idCombat != null) {
                    ActionCombatDAOImpl actionCombatDAO = ActionCombatDAOImpl.getInstance();
                    int[] statsJoueur = actionCombatDAO.recupererDerniersStats(idCombat, joueur.getId());
                    int[] statsAdversaire = actionCombatDAO.recupererDerniersStats(idCombat, adversaire.getId());
                    
                    if (statsJoueur != null && statsAdversaire != null) {
                        String detailsJoueur = "D√©tails " + joueur.getPseudo() + " - D√©fense: " + statsJoueur[1];
                        String detailsAdversaire = "D√©tails " + adversaire.getPseudo() + " - D√©fense: " + statsAdversaire[1];
                        
                        afficherMessageSucces("√âtat du combat actualis√© avec succ√®s!\n\n" +
                                            detailsJoueur + "\n" + detailsAdversaire);
                        return;
                    }
                }
            } catch (Exception e) {
                System.err.println("Erreur lors de la r√©cup√©ration des d√©tails de d√©fense: " + e.getMessage());
            }
            
            // V√©rifier si le combat est termin√© apr√®s la mise √† jour
            if (estCombatTermine()) {
                fenetre.close();
                fenetreAttenteActive = false;
                terminerCombat();
                return;
            }
            
            afficherMessageSucces("√âtat du combat actualis√© avec succ√®s!");
        }));
        
        // Bouton pour actualiser et v√©rifier l'action de l'adversaire
        panel.addComponent(new Button("V√©rifier action adversaire", () -> {
            // Actualiser d'abord les points de vie
            rafraichirPointsDeVie();
            pvJoueurLabel.setText("PV " + joueur.getPseudo() + ": " + joueur.getPersonnage().getPointsDeVie());
            pvAdversaireLabel.setText("PV " + adversaire.getPseudo() + ": " + adversaire.getPersonnage().getPointsDeVie());
            
            // V√©rifier si le combat est termin√© apr√®s la mise √† jour
            if (estCombatTermine()) {
                fenetre.close();
                fenetreAttenteActive = false;
                terminerCombat();
                return;
            }
            
            // R√©cup√©rer l'action de l'adversaire
            try {
                String resultatAction = serviceCombat.obtenirResultatActionAdverse(joueur, adversaire, tourActuel);
                if (resultatAction != null && !resultatAction.equals("Aucun r√©sultat disponible")) {
                    fenetre.close();
                    fenetreAttenteActive = false;
                    afficherMessageSucces("Action adversaire: " + resultatAction);
                    
                    // Incr√©mentation du tour si les deux joueurs ont jou√©
                    final int nouveauTour = tourActuel + 1;
                    tourActuel = nouveauTour;
                    
                    // V√©rifier si on a atteint le nombre max de tours
                    if (nouveauTour > MAX_TOURS) {
                        afficherMessageSucces("Tous les tours sont termin√©s! D√©termination du vainqueur...");
                        terminerCombat(); // Terminer le combat si on a atteint le nombre max de tours
                    } else {
                        // Sinon, passer au tour suivant
                        afficher(); // Afficher le prochain tour
                    }
                } else {
                    afficherMessageErreur("L'adversaire n'a pas encore jou√©. Veuillez patienter.");
                }
            } catch (Exception e) {
                afficherMessageErreur("Erreur lors de la r√©cup√©ration de l'action adverse: " + e.getMessage());
            }
        }));

        // Ajouter un minuteur pour v√©rifier p√©riodiquement l'action de l'adversaire
        panel.addComponent(new EmptySpace());
        panel.addComponent(new Label("V√©rification automatique toutes les secondes..."));
        
        fenetre.setComponent(panel);
        textGUI.addWindow(fenetre);
        
        // Ajouter un listener sur la fermeture de la fen√™tre
        fenetre.addWindowListener(new WindowListenerAdapter() {
            @Override
            public void onUnhandledInput(Window window, com.googlecode.lanterna.input.KeyStroke keyStroke, java.util.concurrent.atomic.AtomicBoolean hasBeenHandled) {
                if (keyStroke.getKeyType() == com.googlecode.lanterna.input.KeyType.Escape) {
                    fenetreAttenteActive = false;
                }
            }
        });
        
        // Mettre en place un timer pour v√©rifier p√©riodiquement les points de vie
        final Timer timerPV = new Timer();
        timerPV.schedule(new TimerTask() {
            @Override
            public void run() {
                textGUI.getGUIThread().invokeLater(() -> {
                    rafraichirPointsDeVie();
                    pvJoueurLabel.setText("PV " + joueur.getPseudo() + ": " + joueur.getPersonnage().getPointsDeVie());
                    pvAdversaireLabel.setText("PV " + adversaire.getPseudo() + ": " + adversaire.getPersonnage().getPointsDeVie());
                    
                    // V√©rifier si le combat est termin√© suite √† cette mise √† jour
                    if (estCombatTermine() && fenetreAttenteActive) {
                        fenetre.close();
                        fenetreAttenteActive = false;
                        timerPV.cancel(); // Arr√™ter les timers
                        terminerCombat();
                    }
                });
            }
        }, 500, 500); // V√©rifier chaque demi-seconde
        
        // Mettre en place un timer pour v√©rifier p√©riodiquement l'action de l'adversaire
        final Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                textGUI.getGUIThread().invokeLater(() -> {
                    try {
                        String resultatAction = serviceCombat.obtenirResultatActionAdverse(joueur, adversaire, tourActuel);
                        if (resultatAction != null && !resultatAction.equals("Aucun r√©sultat disponible")) {
                            if (fenetreAttenteActive) {
                                fenetre.close();
                                fenetreAttenteActive = false;
                                timer.cancel(); // Arr√™ter le timer de v√©rification d'action
                                timerPV.cancel(); // Arr√™ter le timer de v√©rification de PV
                                
                                afficherMessageSucces("Action adversaire: " + resultatAction);
                                
                                // Incr√©mentation du tour si les deux joueurs ont jou√©
                                // Cr√©er une variable finale pour le nouveau tour
                                final int nouveauTour = tourActuel + 1;
                                tourActuel = nouveauTour;
                                
                                // V√©rifier si on a atteint le nombre max de tours
                                if (nouveauTour > MAX_TOURS) {
                                    afficherMessageSucces("Tous les tours sont termin√©s! D√©termination du vainqueur...");
                                    terminerCombat(); // Terminer le combat si on a atteint le nombre max de tours
                                } else {
                                    // Sinon, passer au tour suivant
                                    afficher(); // Afficher le prochain tour
                                }
                            }
                        }
                    } catch (Exception e) {
                        // Ignorer les erreurs silencieusement pour ne pas perturber l'utilisateur
                        System.err.println("Erreur lors de la v√©rification automatique: " + e.getMessage());
                    }
                });
            }
        }, 1000, 1000); // V√©rifier toutes les secondes
    }

    private boolean estCombatTermine() {
        return joueur.getPersonnage().getPointsDeVie() <= 0 ||
               adversaire.getPersonnage().getPointsDeVie() <= 0 ||
               tourActuel > MAX_TOURS;
    }

    private void terminerCombat() {
        Joueur vainqueur = determinerVainqueur();
        
        // Obtenir l'ID du combat en cours
        String idCombat = null;
        try {
            idCombat = serviceCombat.obtenirIdCombatEnCours(joueur.getId());
        } catch (Exception e) {
            System.err.println("Erreur lors de la r√©cup√©ration de l'ID du combat: " + e.getMessage());
        }
        
        try {
            // Terminer officiellement le combat dans le backend
            if (idCombat != null) {
                serviceCombat.terminerCombat(joueur, adversaire, vainqueur);
                
                // Distribution des r√©compenses et mise √† jour des statistiques
                if (vainqueur != null) {
                    // Mise √† jour des statistiques du vainqueur
                    vainqueur.ajouterArgent(500); // Ajouter 500 TerraCoins
                    vainqueur.setVictoires(vainqueur.getVictoires() + 1); // Incr√©menter les victoires
                    joueurDAO.mettreAJourJoueur(vainqueur);
                    
                    // Mise √† jour des statistiques du perdant
                    Joueur perdant = (vainqueur.getId() == joueur.getId()) ? adversaire : joueur;
                    perdant.setDefaites(perdant.getDefaites() + 1); // Incr√©menter les d√©faites
                    joueurDAO.mettreAJourJoueur(perdant);
                    
                    // Augmenter le niveau du royaume du vainqueur dans MongoDB
                    try {
                        RoyaumeMongoDAOImpl royaumeDAO = RoyaumeMongoDAOImpl.getInstance();
                        royaumeDAO.augmenterNiveauRoyaume(vainqueur.getId());
                        System.out.println("Niveau du royaume de " + vainqueur.getPseudo() + " augment√©");
                    } catch (Exception e) {
                        System.err.println("Erreur lors de l'augmentation du niveau du royaume: " + e.getMessage());
                    }
                } else {
                    // En cas de match nul, pas de changement aux statistiques
                }
                
                // Mettre les deux joueurs inactifs
                try {
                    joueurDAO.definirStatutConnexion(joueur.getId(), false);
                    joueurDAO.definirStatutConnexion(adversaire.getId(), false);
                    System.out.println("Statut des joueurs mis √† inactif");
                } catch (Exception e) {
                    System.err.println("Erreur lors de la mise √† jour du statut des joueurs: " + e.getMessage());
                }
                
                // Nettoyer les tables
                try {
                    ActionCombatDAOImpl actionCombatDAO = ActionCombatDAOImpl.getInstance();
                    actionCombatDAO.supprimerActionsCombat(idCombat);
                    actionCombatDAO.supprimerEtatsPersonnage(idCombat);
                    CombatDAOImpl combatDAO = new CombatDAOImpl();
                    combatDAO.supprimerCombatEnCours(idCombat);
                    System.out.println("Tables de combat nettoy√©es avec succ√®s");
                } catch (Exception e) {
                    System.err.println("Erreur lors du nettoyage des tables: " + e.getMessage());
                }
            }
        } catch (Exception e) {
            System.err.println("Erreur lors de la terminaison du combat: " + e.getMessage());
        }

        // Cr√©er une fen√™tre plus √©labor√©e pour la fin du combat
        Window fenetre = new BasicWindow("‚ôõ FIN DU COMBAT ‚ôõ");
        fenetre.setHints(Collections.singletonList(Window.Hint.CENTERED));

        Panel panelPrincipal = new Panel(new GridLayout(1));
        
        // Titre stylis√©
        panelPrincipal.addComponent(new Label("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê").addStyle(SGR.BOLD));
        if (vainqueur != null) {
            boolean victoire = vainqueur.getId() == joueur.getId();
            panelPrincipal.addComponent(
                new Label(victoire ? "VICTOIRE !" : "D√âFAITE !")
                .addStyle(SGR.BOLD)
                .setForegroundColor(victoire ? TextColor.ANSI.GREEN : TextColor.ANSI.RED)
            );
        } else {
            panelPrincipal.addComponent(new Label("MATCH NUL !").addStyle(SGR.BOLD).setForegroundColor(TextColor.ANSI.YELLOW));
        }
        panelPrincipal.addComponent(new Label("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê").addStyle(SGR.BOLD));
        panelPrincipal.addComponent(new EmptySpace());

        // Afficher le vainqueur
        if (vainqueur != null) {
            String message = "Le vainqueur est: " + vainqueur.getPseudo();
            panelPrincipal.addComponent(new Label(message).addStyle(SGR.BOLD));
            
            // Message personnalis√© selon le r√©sultat
            if (vainqueur.getId() == joueur.getId()) {
                panelPrincipal.addComponent(new Label("F√©licitations pour votre victoire!").setForegroundColor(TextColor.ANSI.GREEN));
                
                // D√©terminer la raison de la victoire
                if (adversaire.getPersonnage().getPointsDeVie() <= 0) {
                    panelPrincipal.addComponent(new Label("‚û§ Vous avez vaincu votre adversaire en le r√©duisant √† 0 PV!"));
                } else if (tourActuel > MAX_TOURS) {
                    panelPrincipal.addComponent(new Label("‚û§ Vous avez plus de points de vie que votre adversaire √† la fin des " + MAX_TOURS + " tours!"));
                }
            } else {
                panelPrincipal.addComponent(new Label("Vous avez perdu. Meilleure chance la prochaine fois!").setForegroundColor(TextColor.ANSI.RED));
                
                // D√©terminer la raison de la d√©faite
                if (joueur.getPersonnage().getPointsDeVie() <= 0) {
                    panelPrincipal.addComponent(new Label("‚û§ Votre adversaire vous a vaincu en vous r√©duisant √† 0 PV!"));
                } else if (tourActuel > MAX_TOURS) {
                    panelPrincipal.addComponent(new Label("‚û§ Votre adversaire a plus de points de vie que vous √† la fin des " + MAX_TOURS + " tours!"));
                }
            }
        } else {
            panelPrincipal.addComponent(new Label("Le combat s'est termin√© par un match nul!").setForegroundColor(TextColor.ANSI.YELLOW));
            panelPrincipal.addComponent(new Label("‚û§ Les deux joueurs ont exactement le m√™me nombre de points de vie!"));
        }
        
        panelPrincipal.addComponent(new EmptySpace());
        
        // Afficher les statistiques finales du combat
        panelPrincipal.addComponent(new Label("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ R√âSUM√â DU COMBAT ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ").addStyle(SGR.BOLD));
        panelPrincipal.addComponent(new EmptySpace());
        
        // Statistiques des joueurs
        Panel statsPanel = new Panel(new GridLayout(3));
        
        // En-t√™tes
        statsPanel.addComponent(new Label(""));
        statsPanel.addComponent(new Label(joueur.getPseudo()).addStyle(SGR.UNDERLINE));
        statsPanel.addComponent(new Label(adversaire.getPseudo()).addStyle(SGR.UNDERLINE));
        
        // Points de vie restants
        int pvJoueur = (int) joueur.getPersonnage().getPointsDeVie();
        int pvAdversaire = (int) adversaire.getPersonnage().getPointsDeVie();
        int pvMaxJoueur = (int) joueur.getPersonnage().getPointsDeVieMAX();
        int pvMaxAdversaire = (int) adversaire.getPersonnage().getPointsDeVieMAX();
        
        statsPanel.addComponent(new Label("PV restants:"));
        statsPanel.addComponent(new Label(pvJoueur + "/" + pvMaxJoueur));
        statsPanel.addComponent(new Label(pvAdversaire + "/" + pvMaxAdversaire));
        
        // Pourcentage des PV restants
        statsPanel.addComponent(new Label("% PV restants:"));
        int pctJoueur = (int) (100.0 * pvJoueur / pvMaxJoueur);
        int pctAdversaire = (int) (100.0 * pvAdversaire / pvMaxAdversaire);
        
        statsPanel.addComponent(new Label(pctJoueur + "%").setForegroundColor(getColorForPercentage(pctJoueur)));
        statsPanel.addComponent(new Label(pctAdversaire + "%").setForegroundColor(getColorForPercentage(pctAdversaire)));
        
        // Nombre de tours jou√©s
        statsPanel.addComponent(new Label("Nombre de tours:"));
        statsPanel.addComponent(new Label(String.valueOf(tourActuel)));
        statsPanel.addComponent(new Label(String.valueOf(tourActuel)));
        
        panelPrincipal.addComponent(statsPanel);
        panelPrincipal.addComponent(new EmptySpace());
        
        // R√©sultats et r√©compenses
        if (vainqueur != null && vainqueur.getId() == joueur.getId()) {
            Panel recompensesPanel = new Panel(new GridLayout(1));
            recompensesPanel.addComponent(new Label("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ R√âCOMPENSES ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ").addStyle(SGR.BOLD));
            recompensesPanel.addComponent(new EmptySpace());
            
            // Afficher les r√©compenses obtenues
            recompensesPanel.addComponent(new Label("‚ú¶ +500 TerraCoins").setForegroundColor(TextColor.ANSI.YELLOW));
            recompensesPanel.addComponent(new Label("‚ú¶ +1 victoire ajout√©e √† votre palmar√®s").setForegroundColor(TextColor.ANSI.GREEN));
            recompensesPanel.addComponent(new Label("‚ú¶ Niveau de royaume augment√©!").setForegroundColor(TextColor.ANSI.CYAN));
            
            panelPrincipal.addComponent(recompensesPanel);
            panelPrincipal.addComponent(new EmptySpace());
        }
        
        // Bouton pour retourner au menu principal
        panelPrincipal.addComponent(new Button("Retour au menu principal", () -> {
            fenetre.close();
            retourMenuPrincipal();
        }));

        fenetre.setComponent(panelPrincipal);
        textGUI.addWindowAndWait(fenetre);
    }
    
    /**
     * Retourne une couleur appropri√©e selon le pourcentage de points de vie
     * @param percentage Le pourcentage de points de vie
     * @return La couleur correspondante
     */
    private TextColor getColorForPercentage(int percentage) {
        if (percentage <= 25) {
            return TextColor.ANSI.RED;
        } else if (percentage <= 50) {
            return TextColor.ANSI.YELLOW;
        } else {
            return TextColor.ANSI.GREEN;
        }
    }

    private Joueur determinerVainqueur() {
        // Si l'un des joueurs est mort, l'autre est le vainqueur
        if (joueur.getPersonnage().getPointsDeVie() <= 0) {
            return adversaire;
        } else if (adversaire.getPersonnage().getPointsDeVie() <= 0) {
            return joueur;
        } 
        
        // Si on a atteint le nombre maximum de tours, le vainqueur est celui avec le plus de PV
        if (tourActuel > MAX_TOURS) {
            if (joueur.getPersonnage().getPointsDeVie() > adversaire.getPersonnage().getPointsDeVie()) {
                return joueur;
            } else if (adversaire.getPersonnage().getPointsDeVie() > joueur.getPersonnage().getPointsDeVie()) {
                return adversaire;
            } else {
                return null; // Match nul si m√™me nombre de PV
            }
        }
        
        // Si le combat n'est pas termin√©, on n'a pas encore de vainqueur
        return null;
    }

    private void retourMenuPrincipal() {
        // TODO: Impl√©mentation pour retourner au menu principal
        new EcranPrincipal(null, joueurDAO, joueur.getPseudo(), screen).afficher();
    }

    private void afficherMessageErreur(String message) {
        new MessageDialogBuilder()
                .setTitle("Erreur")
                .setText(message)
                .addButton(MessageDialogButton.OK)
                .build()
                .showDialog(textGUI);
    }
    
    private void afficherMessageSucces(String message) {
        new MessageDialogBuilder()
                .setTitle("Information")
                .setText(message)
                .addButton(MessageDialogButton.OK)
                .build()
                .showDialog(textGUI);
    }

    /**
     * Cr√©e un panneau d√©taill√© affichant les statistiques et l'√©tat des deux combattants
     * @return Un Panel contenant les informations d√©taill√©es des combattants
     */
    private Panel creerPanneauStatistiquesComplet() {
        Panel statsPanel = new Panel(new GridLayout(2).setLeftMarginSize(1).setRightMarginSize(1));
        
        // R√©cup√©rer l'ID du combat en cours
        String idCombat = null;
        int[] statsJoueur = null;
        int[] statsAdversaire = null;
        
        try {
            idCombat = serviceCombat.obtenirIdCombatEnCours(joueur.getId());
            if (idCombat != null) {
                ActionCombatDAOImpl actionCombatDAO = ActionCombatDAOImpl.getInstance();
                statsJoueur = actionCombatDAO.recupererDerniersStats(idCombat, joueur.getId());
                statsAdversaire = actionCombatDAO.recupererDerniersStats(idCombat, adversaire.getId());
            }
        } catch (Exception e) {
            System.err.println("Erreur lors de la r√©cup√©ration des statistiques: " + e.getMessage());
        }
        
        // Panneau pour le joueur
        Panel joueurPanel = new Panel(new GridLayout(1));
        joueurPanel.addComponent(new Label("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ VOTRE PERSONNAGE ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ").addStyle(SGR.BOLD));
        joueurPanel.addComponent(new Label(joueur.getPseudo() + " (" + joueur.getPersonnage().getNom() + ")").addStyle(SGR.UNDERLINE));
        
        // Barres de progression pour les points de vie
        double pvMax = joueur.getPersonnage().getPointsDeVieMAX();
        double pvActuel = joueur.getPersonnage().getPointsDeVie();
        double pourcentagePV = Math.min(100, Math.max(0, (pvActuel / pvMax) * 100));
        
        String barrePV = genererBarreProgression(pourcentagePV);
        joueurPanel.addComponent(new Label("PV: " + (int)pvActuel + "/" + (int)pvMax));
        joueurPanel.addComponent(new Label(barrePV));
        
        // Afficher les statistiques additionnelles du joueur
        joueurPanel.addComponent(new EmptySpace(new TerminalSize(0, 1)));
        joueurPanel.addComponent(new Label("Attaque: " + joueur.getPersonnage().getDegats()));
        joueurPanel.addComponent(new Label("D√©fense: " + joueur.getPersonnage().getResistance()));
        
        // Afficher les informations de d√©fense suppl√©mentaires si disponibles
        if (statsJoueur != null && statsJoueur.length >= 2) {
            int defenseSupplementaire = statsJoueur[1];
            if (defenseSupplementaire > 0) {
                joueurPanel.addComponent(new Label("Bonus d√©fense: +" + defenseSupplementaire).addStyle(SGR.BOLD).setForegroundColor(TextColor.ANSI.GREEN));
            }
        }
        
        // Panneau pour l'adversaire
        Panel adversairePanel = new Panel(new GridLayout(1));
        adversairePanel.addComponent(new Label("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ADVERSAIRE ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ").addStyle(SGR.BOLD));
        adversairePanel.addComponent(new Label(adversaire.getPseudo() + " (" + adversaire.getPersonnage().getNom() + ")").addStyle(SGR.UNDERLINE));
        
        // Barres de progression pour les points de vie de l'adversaire
        double pvMaxAdv = adversaire.getPersonnage().getPointsDeVieMAX();
        double pvActuelAdv = adversaire.getPersonnage().getPointsDeVie();
        double pourcentagePVAdv = Math.min(100, Math.max(0, (pvActuelAdv / pvMaxAdv) * 100));
        
        String barrePVAdv = genererBarreProgression(pourcentagePVAdv);
        adversairePanel.addComponent(new Label("PV: " + (int)pvActuelAdv + "/" + (int)pvMaxAdv));
        adversairePanel.addComponent(new Label(barrePVAdv));
        
        // Afficher les statistiques additionnelles de l'adversaire
        adversairePanel.addComponent(new EmptySpace(new TerminalSize(0, 1)));
        adversairePanel.addComponent(new Label("Attaque: " + adversaire.getPersonnage().getDegats()));
        adversairePanel.addComponent(new Label("D√©fense: " + adversaire.getPersonnage().getResistance()));
        
        // Afficher les informations de d√©fense suppl√©mentaires si disponibles
        if (statsAdversaire != null && statsAdversaire.length >= 2) {
            int defenseSupplementaire = statsAdversaire[1];
            if (defenseSupplementaire > 0) {
                adversairePanel.addComponent(new Label("Bonus d√©fense: +" + defenseSupplementaire).addStyle(SGR.BOLD).setForegroundColor(TextColor.ANSI.GREEN));
            }
        }
        
        // Ajouter les deux panneaux au panneau principal
        statsPanel.addComponent(joueurPanel);
        statsPanel.addComponent(adversairePanel);
        
        return statsPanel;
    }
    
    /**
     * G√©n√®re une barre de progression visuelle bas√©e sur un pourcentage
     * @param pourcentage Le pourcentage de remplissage de la barre (0-100)
     * @return Une cha√Æne repr√©sentant la barre de progression
     */
    private String genererBarreProgression(double pourcentage) {
        int longueurTotale = 20;
        int remplissage = (int) Math.round(pourcentage * longueurTotale / 100);
        
        StringBuilder sb = new StringBuilder("[");
        for (int i = 0; i < longueurTotale; i++) {
            if (i < remplissage) {
                sb.append("‚ñà");
            } else {
                sb.append(" ");
            }
        }
        sb.append("] ").append((int)pourcentage).append("%");
        
        return sb.toString();
    }

    /**
     * Affiche l'√©cran de r√©solution d'un tour avec les r√©sultats des actions des deux joueurs
     */
    private void afficherEcranResolutionTour() {
        try {
            String idCombat = serviceCombat.obtenirIdCombatEnCours(joueur.getId());
            if (idCombat == null) {
                afficherMessageErreur("Impossible de trouver l'ID du combat en cours.");
                return;
            }
            
            // R√©cup√©rer les actions ex√©cut√©es par les deux joueurs pour ce tour
            ActionCombatDAOImpl actionCombatDAO = ActionCombatDAOImpl.getInstance();
            ResultSet resultats = actionCombatDAO.obtenirActionsTour(idCombat, tourActuel);
            
            if (resultats == null) {
                afficherMessageErreur("Erreur lors de la r√©cup√©ration des actions du tour.");
                return;
            }
            
            // Cr√©er une fen√™tre avec un titre plus √©labor√©
            Window fenetre = new BasicWindow("‚òÖ R√âSOLUTION DU TOUR " + tourActuel + " ‚òÖ");
            fenetre.setHints(Collections.singletonList(Window.Hint.CENTERED));
            
            Panel panelPrincipal = new Panel(new GridLayout(1));
            
            // Ajouter un en-t√™te stylis√©
            panelPrincipal.addComponent(new Label("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê").addStyle(SGR.BOLD));
            panelPrincipal.addComponent(new Label("R√âSULTATS DES ACTIONS").addStyle(SGR.BOLD));
            panelPrincipal.addComponent(new Label("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê").addStyle(SGR.BOLD));
            panelPrincipal.addComponent(new EmptySpace());
            
            // Initialiser les cha√Ænes pour stocker les descriptions des actions
            String actionJoueurLocal = null;
            String actionAdversaire = null;
            double vieJoueurApres = joueur.getPersonnage().getPointsDeVie();
            double vieAdversaireApres = adversaire.getPersonnage().getPointsDeVie();
            
            // Parcourir les r√©sultats et extraire les actions
            while (resultats.next()) {
                int joueurId = resultats.getInt("joueur_id");
                String typeAction = resultats.getString("type_action");
                
                // R√©cup√©rer aussi les param√®tres et les points de vie apr√®s l'action
                String parametres = resultats.getString("parametres");
                double vieRestanteJoueur = resultats.getDouble("vie_restante_joueur");
                double vieRestanteAdversaire = resultats.getDouble("vie_restante_adversaire");
                
                if (joueurId == joueur.getId()) {
                    actionJoueurLocal = formaterDescriptionAction(typeAction, parametres, true);
                    vieJoueurApres = vieRestanteJoueur;
                    vieAdversaireApres = vieRestanteAdversaire;
                } else if (joueurId == adversaire.getId()) {
                    actionAdversaire = formaterDescriptionAction(typeAction, parametres, false);
                }
            }
            
            // Afficher les actions dans des panneaux s√©par√©s avec des bordures
            if (actionJoueurLocal != null) {
                Panel actionJoueurPanel = new Panel(new GridLayout(1));
                actionJoueurPanel.addComponent(new Label("Votre action:").addStyle(SGR.BOLD).setForegroundColor(TextColor.ANSI.BLUE));
                actionJoueurPanel.addComponent(new Label(actionJoueurLocal));
                panelPrincipal.addComponent(actionJoueurPanel);
                panelPrincipal.addComponent(new EmptySpace());
            }
            
            if (actionAdversaire != null) {
                Panel actionAdversairePanel = new Panel(new GridLayout(1));
                actionAdversairePanel.addComponent(new Label("Action de " + adversaire.getPseudo() + ":").addStyle(SGR.BOLD).setForegroundColor(TextColor.ANSI.RED));
                actionAdversairePanel.addComponent(new Label(actionAdversaire));
                panelPrincipal.addComponent(actionAdversairePanel);
                panelPrincipal.addComponent(new EmptySpace());
            }
            
            // Afficher le r√©sum√© des points de vie apr√®s ce tour
            panelPrincipal.addComponent(new Label("‚öî R√âSULTAT DU TOUR ‚öî").addStyle(SGR.BOLD));
            panelPrincipal.addComponent(new EmptySpace());
            
            // Cr√©er un r√©sum√© visuel des changements de points de vie
            Panel resultatPanel = new Panel(new GridLayout(2));
            resultatPanel.addComponent(new Label(joueur.getPseudo() + ":"));
            resultatPanel.addComponent(new Label(String.format("%.0f PV", vieJoueurApres)));
            resultatPanel.addComponent(new Label(adversaire.getPseudo() + ":"));
            resultatPanel.addComponent(new Label(String.format("%.0f PV", vieAdversaireApres)));
            panelPrincipal.addComponent(resultatPanel);
            
            panelPrincipal.addComponent(new EmptySpace());
            
            // D√©terminer qui est en avantage actuellement
            if (vieJoueurApres > vieAdversaireApres) {
                panelPrincipal.addComponent(new Label("Vous avez l'avantage!").setForegroundColor(TextColor.ANSI.GREEN));
            } else if (vieAdversaireApres > vieJoueurApres) {
                panelPrincipal.addComponent(new Label(adversaire.getPseudo() + " a l'avantage!").setForegroundColor(TextColor.ANSI.RED));
            } else {
                panelPrincipal.addComponent(new Label("Le combat est tr√®s serr√©!").setForegroundColor(TextColor.ANSI.YELLOW));
            }
            
            panelPrincipal.addComponent(new EmptySpace());
            
            // V√©rifier si le combat est termin√© apr√®s ce tour
            if (vieJoueurApres <= 0 || vieAdversaireApres <= 0) {
                String message = vieJoueurApres <= 0 ? 
                        adversaire.getPseudo() + " vous a vaincu!" : 
                        "Vous avez vaincu " + adversaire.getPseudo() + "!";
                panelPrincipal.addComponent(new Label(message).addStyle(SGR.BOLD));
            } 
            // V√©rifier si c'√©tait le dernier tour
            else if (tourActuel >= MAX_TOURS) {
                panelPrincipal.addComponent(new Label("C'√©tait le dernier tour!").addStyle(SGR.BOLD));
                String vainqueur = vieJoueurApres > vieAdversaireApres ? 
                        "Vous √™tes le vainqueur!" : 
                        (vieAdversaireApres > vieJoueurApres ? adversaire.getPseudo() + " est le vainqueur!" : "Match nul!");
                panelPrincipal.addComponent(new Label(vainqueur).addStyle(SGR.BOLD));
            }
            
            // Bouton pour continuer
            // Cr√©er des copies finales des variables pour utilisation dans le lambda
            final double vieJoueurFinal = vieJoueurApres;
            final double vieAdversaireFinal = vieAdversaireApres;
            
            panelPrincipal.addComponent(new Button("Continuer", () -> {
                fenetre.close();
                
                // Si le combat est termin√© apr√®s ce tour, afficher l'√©cran de fin
                if (vieJoueurFinal <= 0 || vieAdversaireFinal <= 0 || tourActuel >= MAX_TOURS) {
                    terminerCombat();
                } else {
                    // Sinon, passer au tour suivant - incr√©menter avant le lambda
                    int nouveauTour = tourActuel + 1;
                    tourActuel = nouveauTour;
                    afficher();
                }
            }));
            
            fenetre.setComponent(panelPrincipal);
            textGUI.addWindowAndWait(fenetre);
            
        } catch (Exception e) {
            System.err.println("Erreur lors de l'affichage de l'√©cran de r√©solution: " + e.getMessage());
            e.printStackTrace();
            afficherMessageErreur("Erreur lors de l'affichage de l'√©cran de r√©solution: " + e.getMessage());
        }
    }
    
    /**
     * Formate la description d'une action pour l'affichage
     * @param typeAction Le type d'action (Attaque, Defense, etc.)
     * @param parametres Les param√®tres additionnels de l'action
     * @param estJoueurLocal Indique si l'action est celle du joueur local
     * @return Une cha√Æne format√©e d√©crivant l'action
     */
    private String formaterDescriptionAction(String typeAction, String parametres, boolean estJoueurLocal) {
        String nomPersonnage = estJoueurLocal ? joueur.getPersonnage().getNom() : adversaire.getPersonnage().getNom();
        
        switch (typeAction.toLowerCase()) {
            case "attaque":
                return "‚ñ∫ " + nomPersonnage + " attaque avec son arme principale!";
            case "defense":
                return "‚ñ∫ " + nomPersonnage + " renforce sa d√©fense!";
            case "competence":
                if (parametres != null && !parametres.isEmpty()) {
                    return "‚ñ∫ " + nomPersonnage + " utilise la comp√©tence: " + parametres + "!";
                } else {
                    return "‚ñ∫ " + nomPersonnage + " utilise une comp√©tence sp√©ciale!";
                }
            default:
                return "‚ñ∫ " + nomPersonnage + " effectue une action: " + typeAction;
        }
    }

    /**
     * Affiche l'√©cran d'attente pendant que l'adversaire joue son tour
     */
    private void afficherEcranAttente() {
        // Marquer la fen√™tre d'attente comme active
        fenetreAttenteActive = true;
        
        // Cr√©er une fen√™tre d'attente am√©lior√©e
        Window fenetre = new BasicWindow("‚åõ En attente de " + adversaire.getPseudo() + " ‚åõ");
        fenetre.setHints(Collections.singletonList(Window.Hint.CENTERED));
        
        Panel panelPrincipal = new Panel(new GridLayout(1));
        
        // Titre et informations sur le tour
        panelPrincipal.addComponent(new Label("TOUR " + tourActuel + "/" + MAX_TOURS).addStyle(SGR.BOLD));
        panelPrincipal.addComponent(new EmptySpace());
        
        // Affichage dynamique des informations de combat actuelles
        panelPrincipal.addComponent(new Label("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ √âTAT DU COMBAT ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ").addStyle(SGR.BOLD));
        
        // Panel pour les statistiques actuelles
        Panel statsPanel = creerPanneauStatistiquesComplet();
        panelPrincipal.addComponent(statsPanel);
        panelPrincipal.addComponent(new EmptySpace());
        
        // Afficher un message d'attente anim√©
        Label labelAttente = new Label("En attente de l'action de " + adversaire.getPseudo() + "...");
        panelPrincipal.addComponent(labelAttente);
        panelPrincipal.addComponent(new EmptySpace());
        
        // Ajouter un compteur de v√©rifications
        Label compteurLabel = new Label("V√©rifications effectu√©es: 0");
        panelPrincipal.addComponent(compteurLabel);
        
        // Ajouter des conseils strat√©giques pour le joueur
        Panel conseilsPanel = new Panel(new GridLayout(1));
        conseilsPanel.addComponent(new EmptySpace());
        conseilsPanel.addComponent(new Label("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ CONSEILS STRAT√âGIQUES ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ").addStyle(SGR.BOLD));
        conseilsPanel.addComponent(new EmptySpace());
        
        // Afficher des conseils al√©atoires
        String[] conseils = {
            "Les attaques sont efficaces, mais ne n√©gligez pas la d√©fense!",
            "Essayez de garder au moins 30% de vos points de vie pour les derniers tours.",
            "La d√©fense peut √™tre cruciale si vous √™tes en avantage au niveau des PV.",
            "Utilisez vos comp√©tences au moment opportun pour renverser la situation.",
            "Observez le comportement de votre adversaire pour anticiper sa strat√©gie.",
            "Si vous avez peu de PV, une bonne d√©fense peut vous donner une chance de r√©cup√©rer."
        };
        
        // S√©lectionner 2 conseils al√©atoires
        Random random = new Random();
        for (int i = 0; i < 2; i++) {
            int index = random.nextInt(conseils.length);
            conseilsPanel.addComponent(new Label("‚Ä¢ " + conseils[index]).setForegroundColor(TextColor.ANSI.YELLOW));
        }
        
        panelPrincipal.addComponent(conseilsPanel);
        panelPrincipal.addComponent(new EmptySpace());
        
                    // Bouton pour actualiser manuellement
        panelPrincipal.addComponent(new Button("Actualiser maintenant", () -> {
            // Incr√©menter le compteur de v√©rifications manuelles
            compteurVerifications++;
            compteurLabel.setText("V√©rifications effectu√©es: " + compteurVerifications);
            
            // V√©rifier si l'adversaire a jou√©
            try {
                final String idCombatLocal = serviceCombat.obtenirIdCombatEnCours(joueur.getId());
                if (idCombatLocal != null) {
                    ActionCombatDAOImpl actionCombatDAO = ActionCombatDAOImpl.getInstance();
                    boolean adversairePret = actionCombatDAO.joueurAEffectueAction(idCombatLocal, tourActuel, adversaire.getId());
                    
                    if (adversairePret) {
                        // L'adversaire a jou√© son tour
                        fenetre.close();
                        fenetreAttenteActive = false;
                        
                        String resultatAction = serviceCombat.obtenirResultatActionAdverse(joueur, adversaire, tourActuel);
                        afficherMessageSucces("Action adversaire: " + resultatAction);
                        
                        // Passer au tour suivant ou √† la r√©solution
                        boolean joueurLocalPret = actionCombatDAO.joueurAEffectueAction(idCombatLocal, tourActuel, joueur.getId());
                        if (joueurLocalPret && adversairePret) {
                            // Les deux joueurs ont jou√©, afficher la r√©solution du tour
                            afficherEcranResolutionTour();
                        } else {
                            // Si pour une raison quelconque, le joueur local n'a pas encore jou√©
                            // (ce qui ne devrait pas arriver normalement), retourner √† l'√©cran principal
                            afficher();
                        }
                    } else {
                        // L'adversaire n'a pas encore jou√©
                        afficherMessageErreur(adversaire.getPseudo() + " n'a pas encore jou√© son tour.");
                    }
                }
            } catch (Exception e) {
                System.err.println("Erreur lors de la v√©rification manuelle: " + e.getMessage());
                e.printStackTrace();
            }
        }));
        
        // Cr√©er un timer pour animer le texte d'attente (points de suspension)
        Timer animationTimer = new Timer();
        final String[] animations = {"En attente de l'action de " + adversaire.getPseudo() + ".", 
                                   "En attente de l'action de " + adversaire.getPseudo() + "..", 
                                   "En attente de l'action de " + adversaire.getPseudo() + "..."};
        final int[] animIndex = {0};
        
        animationTimer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                if (fenetreAttenteActive) {
                    try {
                        textGUI.getGUIThread().invokeLater(() -> {
                            labelAttente.setText(animations[animIndex[0]]);
                            animIndex[0] = (animIndex[0] + 1) % animations.length;
                        });
                    } catch (Exception e) {
                        // Ignorer les erreurs d'animation
                    }
                } else {
                    animationTimer.cancel();
                }
            }
        }, 500, 500);
        
        fenetre.setComponent(panelPrincipal);
        textGUI.addWindowAndWait(fenetre);
        
        // Nettoyage
        fenetreAttenteActive = false;
        animationTimer.cancel();
    }
}
